pipeline {
    
   agent any
   
   stages {
       
      stage ("Stop/Remove Container"){
          //Checks if container is running to stop it and delete image.
          steps{
              script {
                env.DPS = sh (script: 'docker ps | wc -l', returnStdout: true).trim()
                env.DILS = sh (script: 'docker image ls | wc -l', returnStdout: true).trim()
              }
              script{
                if ( env.DPS == '2' ){
                  sh 'docker stop CtC'
                  sh 'docker rm CtC'
                }
              
              }
              script{
                if ( env.DILS == '4' ){
                  sh 'docker rmi ctc:v.$(($(cat /var/lib/jenkins/workspace/version_var)-1))'
                    
                }
              }
          
            }
      }
       
      stage('Checkout') {
          //Copies git repo
          steps {
              git branch: 'main', credentialsId: 'GitLab', url: 'git@git.epam.com:epm-rdpe/ctc-be.git'
          }
      }

      stage("Filling database credential"){
         //Filling database credential
         steps{
             withCredentials([usernamePassword(credentialsId: 'developer_db', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'sed -i "s/Username/$USERNAME/g" ChildrenToChildren/appsettings.json'
                    sh 'sed -i "s/PASSWORD/$PASSWORD/g" ChildrenToChildren/appsettings.json'
                }
            withCredentials([string(credentialsId: 'db_address', variable: 'DB_ADRESS')]) { 
                    sh 'sed -i "s/ChildrenToChildrenDb/$DB_ADRESS/g" ChildrenToChildren/appsettings.json'
                    sh 'sed -i "s/ChildrenToChildrenMobileDb/$DB_ADRESS/g" ChildrenToChildren/appsettings.json'
                }
            }
         }
      
      stage ("Update LaunchSettings"){
          //Fixes dotNet team's bug in code so the app is accessible from 0.0.0.0
          steps {
              sh 'sed -i "s/localhost/0.0.0.0/g" ChildrenToChildren/Properties/launchSettings.json'
          }
      }
      
      
      stage ("Build Image"){
          //Builds docker image
          steps {
              sh 'echo "$(($(cat /var/lib/jenkins/workspace/version_var) + 1))" > /var/lib/jenkins/workspace/version_var '
              script {
                env.VERS = sh (script: 'cat /var/lib/jenkins/workspace/version_var', returnStdout: true).trim()
                }    
              sh 'docker build -t ctc:v.${VERS} .'
          }
      }
      
      stage ('Run Image'){
          //Starts Docker Image
          steps{
              sh 'docker run -d -p 5009:5009 -p 7009:7009 --restart unless-stopped --name CtC ctc:v.${VERS}'
          }
      }
      
      
   }
   
   post { 
       //Cleans the workspace directory
      always { 
         sh 'rm -r *'
      }
    }
   
}
