pipeline {
    
   agent any
   
   stages {
      stage('Checkout') {
          //Copies git repo
          steps {
              git branch: 'main', credentialsId: 'GitLab', url: 'git@git.epam.com:epm-rdpe/ctc-be.git'
          }
      }
      
      stage ("Update LaunchSettings"){
          //Fixes dotNet team's bug in code so the app is accessible from 0.0.0.0
          steps {
              sh 'sed -i "s/localhost/0.0.0.0/g" ChildrenToChildren/Properties/launchSettings.json'
          }
      }
      
      stage("Filling database credential"){
         //Filling database credential
         steps{
             withCredentials([usernamePassword(credentialsId: 'developer_db', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'sed -i "s/Username/$USERNAME/g" ChildrenToChildren/appsettings.json'
                    sh 'sed -i "s/PASSWORD/$PASSWORD/g" ChildrenToChildren/appsettings.json'
                }
            withCredentials([string(credentialsId: 'db_address', variable: 'DB_ADRESS')]) { 
                    sh 'sed -i "s/ServerAddress/$DB_ADRESS/g" ChildrenToChildren/appsettings.json'
                }
            }
         }

      stage ("Build Image"){
          //Builds docker image
          steps {
              sh 'echo "$(($(cat /var/lib/jenkins/workspace/version_var) + 1))" > /var/lib/jenkins/workspace/version_var '
              script {
                env.VERS = sh (script: 'cat /var/lib/jenkins/workspace/version_var', returnStdout: true).trim()
                }    
              sh 'docker build -t ctc:v.${VERS} .'
          }
      }
      
      stage ('Run and test new Container'){
          //Starts Docker Image
          steps{
              sh 'docker stop CtC'
              sh 'docker run -d -p 5009:5009 -p 7009:7009 --name CtC_test ctc:v.${VERS}'
              sh 'sleep 30'
              
              script{
                  catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                  env.TEST = sh 'curl -I localhost:5009'
                  }
                  if (env.TEST){
                      echo "==== New container successfully started ===="
                      sh 'docker stop CtC_test && docker rm CtC_test'
                      sh 'docker rm CtC'
                      script {
                        env.DILS = sh (script: 'docker image ls | wc -l', returnStdout: true).trim()
                        }
                       script{
                          if ( env.DILS == '6' ){
                              sh 'docker rmi ctc:v.$(($(cat /var/lib/jenkins/workspace/version_var)-1))'
                    
                }
              }
                      sh 'docker run -d -p 5009:5009 -p 7009:7009 --restart unless-stopped --name CtC ctc:v.${VERS}'
                      sh 'sleep 30'
                      script{
                          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                          env.PREVIOUS = sh 'curl -I localhost:5009'
                          if (env.PREVIOUS){
                              echo "==== New container successfully started ===="
                              } else {
                                echo "==== Something went wrong ===="
                              }
                          }
                        }
                      } else {
                      echo "==== Something went wrong ===="
                      echo "==== Removing failed container and starting the previous one ===="
                      sh 'docker stop CtC_test && docker rm CtC_test'
                      sh 'docker start CtC'
                      sh 'sleep 30'
                      script{
                          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                          env.PREVIOUS = sh 'curl -I localhost:5009'
                          if (env.PREVIOUS){
                              echo "==== Previous container successfully started ===="
                              } else {
                                echo "==== Something went wrong ===="
                              }
                          }
                        }
                    }
                }
            }
        }

    }
  post { 
       //Cleans the workspace directory
      always { 
         sh 'rm -r *'
      }
    }
 }
